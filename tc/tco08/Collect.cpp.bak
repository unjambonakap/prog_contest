// BEGIN CUT HERE

// END CUT HERE
#line 5 "Collect.cpp"

#include <vector>
#include <list>
#include <map>
#include <set>
#include <deque>
#include <queue>
#include <stack>
#include <algorithm>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <cstdlib>
#include <string>
#include <cstring>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <cassert>
#include <climits>
//#include <ext/hash_map>


using namespace std;
using namespace __gnu_cxx;



#define REP(i,n) for(int i = 0; i < (n); i++)

#define REPV(i, n) for (int i = (n) - 1; i >= 0; i--)
#define FOR(i, a, b) for(int i = (a); i <= (b); i++)
#define FORV(i, a, b) for(int i = (a); i >= (b); i--)

#define FE(i,t) for (typeof((t).begin())i=(t).begin();i!=(t).end();i++)
#define FEV(i,t) for (typeof((t).rbegin())i=(t).rbegin();i!=(t).rend();i++)

#define SZ(a) (int((a).size()))
#define two(x) (1 << (x))
#define twoll(x) (1LL << (x))
#define ALL(a) (a).begin(), (a).end()
#define CLR(a) (a).clear()


#define pb push_back
#define PF push_front
#define ST first
#define ND second
#define MP(x,y) make_pair(x, y)

typedef long long ll;
typedef unsigned long long ull;
typedef pair<int,int> pii;
typedef vector<int> vi;
typedef vector<string> vs;
typedef queue<int> qi;

inline int count_bit(int n){return (n == 0)?0:1+count_bit(n&(n-1));}
inline bool bit_set(int a, int b){return (a&two(b));}

double tb[]={
		3.5000000000000000,4.2500000000000000,4.6666666666666670,4.9444444444444446,5.1296296296296298,5.2746913580246915,5.3955761316872426,5.4963134430727019,5.5802612025605844,5.6502176688004866,5.7085147240004055,5.7570956033336707,5.7975796694447252,5.8313163912039370,5.8594303260032801,5.8828586050027329,5.9023821708356108,5.9186518090296749,5.9322098408580617,5.9435082007150513,5.9529235005958760,5.9607695838298964,5.9673079865249132,5.9727566554374274,5.9772972128645225,5.9810810107204349,5.9842341756003616,5.9868618130003011,5.9890515108335842,5.9908762590279867,5.9923968825233223,5.9936640687694345,5.9947200573078616,5.9956000477565512,5.9963333731304589,5.9969444776087153,5.9974537313405953,5.9978781094504958,5.9982317578754127,5.9985264648961767,5.9987720540801472,5.9989767117334560,5.9991472597778799,5.9992893831482332,5.9994078192901936,5.9995065160751606,5.9995887633959670,5.9996573028299718,5.9997144190249765,5.9997620158541469,5.9998016798784555,5.9998347332320456,5.9998622776933708,5.9998852314111417,5.9999043595092845,5.9999202995910697,5.9999335829925577,5.9999446524937978,5.9999538770781644,5.9999615642318034,5.9999679701931692,5.9999733084943072,5.9999777570785886,5.9999814642321567,5.9999845535267973,5.9999871279389971,5.9999892732824973,5.9999910610687470,5.9999925508906218,5.9999937924088513,5.9999948270073755,5.9999956891728123,5.9999964076440095,5.9999970063700072,5.9999975053083388,5.9999979210902818,5.9999982675752346,5.9999985563126952,5.9999987969272457,5.9999989974393708,5.9999991645328086,5.9999993037773400,5.9999994198144497,5.9999995165120410,5.9999995970933675,5.9999996642444726,5.9999997202037267,5.9999997668364387,5.9999998056970316,5.9999998380808597,5.9999998650673829,5.9999998875561520,5.9999999062967930,5.9999999219139939,5.9999999349283275,5.9999999457736060,5.9999999548113383,5.9999999623427813,5.9999999686189840,5.9999999738491532
		,5.0555555555555554,6.2623456790123448,7.1000514403292172,7.7654535322359388,8.3241735015622620,8.8240974921251869,9.2690128113939263,9.6586502399843077,9.9959312054983549,10.2853874156636529,10.5401208449500121,10.7618817216460521,10.9532678820576184,11.1173295642280436,11.2572234765650574,11.3760071839720531,11.4765251673154900,11.5613537371185409,11.6327828117346428,11.6928199570954323,11.7432071035863999,11.7854437479008443,11.8208127261989731,11.8504061627687776,11.8751501987908608,11.8958277558096590,11.9130990026311547,11.9275194508892319,11.9395557567803312,11.9495993906312759,11.9579783764387919,11.9649673166476482,11.9707959140688693,11.9756561901007910,11.9797085809011623,11.9830870737721504,11.9859035265377987,11.9882512941479362,11.9902082696833041,11.9918394316064809,11.9931989755542805,11.9943320971393597,11.9952764819986317,11.9960635505422637,11.9967194973570237,11.9972661588427520,11.9977217372614877,11.9981014048191987,11.9984178075585621,11.9986814856107689,11.9989012236422816,11.9990843430583620,11.9992369456202539,11.9993641165388336,11.9994700937744625,11.9995584091584160,11.9996320060206898,11.9996933372316033,11.9997444469159387,11.9997870385569883,11.9998225317560774,11.9998521095364943,11.9998767577663585,11.9998972980131295,11.9999144149237882,11.9999286790426325,11.9999405658268277,11.9999504714931664,11.9999587262240368,11.9999656051726209,11.9999713376340740,11.9999761146882715,11.9999800955688460,11.9999834129707601,11.9999861774733638,11.9999884812262270,11.9999904010207565,11.9999920008498666,11.9999933340410294,11.9999944450338258,11.9999953708612654,11.9999961423842070,11.9999967853200467,11.9999973210999507,11.9999977675832294,11.9999981396526501,11.9999984497105157,11.9999987080920754,11.9999989234100468,11.9999991028416950,11.9999992523680739,11.9999993769733919,11.9999994808111587,11.9999995673426287,11.9999996394521862,11.9999996995434834,11.9999997496195707,11.9999997913496390,11.9999998261247001,11.9999998551039173
		,6.3055555555555571,8.1498199588477362,9.5709691977213804,10.7124725234815550,11.7314259235609608,12.6369004657167849,13.4245988942480317,14.1000875886018999,14.6880858265327401,15.2012339600584170,15.6433650951596128,16.0216056689291158,16.3426144123718906,16.6135788999349749,16.8414499575241088,17.0325851358500273,17.1926156949117761,17.3264315535082254,17.4382247652759794,17.5315585699027494,17.6094442096091122,17.6744162911942482,17.7286022901122919,17.7737844430163570,17.8114536889015938,17.8428560333587853,17.8690320347457607,17.8908502226329738,17.9090352587062966,17.9241915953758841,17.9368233092309026,17.9473507022482757,17.9561241820923136,17.9634358580744191,17.9695292229591885,17.9746072330255693,17.9788390491512899,17.9823656594077939,17.9853045678593872,17.9877537040815163,17.9897946825483395,17.9914955197635820,17.9929128991922802,17.9940940591471481,17.9950783663283538,17.9958986273113197,17.9965821815933751,17.9971518125617216,17.9976265066992021,17.9980220863009350,17.9983517367693580,17.9986264460483056,17.9988553708327110,17.9990461417537375,17.9992051177068397,17.9993375977965648,17.9994479979607434,17.9995399981596265,17.9996166650351270,17.9996805541279805,17.9997337950594520,17.9997781625167761,17.9998151354078999,17.9998459461574392,17.9998716217868804,17.9998930181481107,17.9999108484514565,17.9999257070392069,17.9999380891967853,17.9999484076622167,17.9999570063839478,17.9999641719857699,17.9999701433208728,17.9999751194336532,17.9999792661944227,17.9999827218284878,17.9999856015236048,17.9999880012695677,17.9999900010578955,17.9999916675482119,17.9999930562901440,17.9999942135750999,17.9999951779792298,17.9999959816493345,17.9999966513744489,17.9999972094786926,17.9999976745655843,17.9999980621379834,17.9999983851149743,17.9999986542624626,17.9999988785520451,17.9999990654600488,17.9999992212167008,17.9999993510139120,17.9999994591782517,17.9999995493152092,17.9999996244293463,17.9999996870244523,17.9999997391870359,17.9999997826558626
		,7.5277777777777724,10.0824545610425229,12.0641544786956594,13.7099928864913387,15.1826124174348394,16.4718473253097173,17.5916969274072699,18.5830604270524304,19.4384523101248980,20.1711761041998585,20.7947663718037248,21.3214314207584898,21.7639191276996584,22.1345231207004716,22.4443329163694543,22.7030199257113168,22.9188642498666191,23.0988799654884964,23.2489715142625073,23.3740904483701577,23.4783795750332338,23.5653000510517465,23.6377409200100779,23.6981122930078989,23.7484240030993341,23.7903516855018289,23.8252921317303326,23.8544095735842525,23.8786743379811384,23.8988951059258028,23.9157458207547862,23.9297881260063789,23.9414900716619776,23.9512417071835593,23.9593680782533021,23.9661400588289659,23.9717833786746901,23.9764861467694530,23.9804051210799365,23.9836709335238467,23.9863924441932213,23.9886603699240126,23.9905503081330131,23.9921252566982979,23.9934377138694153,23.9945314281979840,23.9954428568163003,23.9962023806713738,23.9968353172210627,23.9973627643479048,23.9978023036215191,23.9981685863502996,23.9984738219580009,23.9987281849646479,23.9989401541370242,23.9991167951140447,23.9992639959282883,23.9993866632735333,23.9994888860612647,23.9995740717177277,23.9996450597647666,23.9997042164706471,23.9997535137255653,23.9997945947712878,23.9998288289760531,23.9998573574800425,23.9998811312333515,23.9999009426944738,23.9999174522453949,23.9999312102045046,23.9999426751704448,23.9999522293087182,23.9999601910905618,23.9999668259088033,23.9999723549239619,23.9999769624366515,23.9999808020305565,23.9999840016920878,23.9999866680767582,23.9999888900639355,23.9999907417199516,23.9999922847666411,23.9999935706388499,23.9999946421990273,23.9999955351658478,23.9999962793048560,23.9999968994207293,23.9999974161839091,23.9999978468199160,23.9999982056832586,23.9999985047360624,23.9999987539467199,23.9999989616222500,23.9999991346851829,23.9999992789043297,23.9999993990869704,23.9999994992391521,23.9999995826992638,23.9999996522493966,23.9999997102078382
		,8.7538580246913682,12.0035288819984256,14.5318528105517828,16.6884527351664431,18.6143873399977693,20.3104904428520854,21.8165386625816247,23.1129929770886271,24.2279818395788702,25.1738139305859683,25.9709490845217736,26.6392323688861445,27.1979054827724056,27.6642575053333566,28.0532415811168860,28.3775582574493761,28.6478976089747803,28.8732156763593295,29.0609974161909115,29.2174901829908151,29.3479046873421687,29.4565853344360811,29.5471534787554262,29.6226274028556418,29.6855225782300387,29.7379353467738774,29.7816127173732035,29.8180105594826088,29.8483421121976029,29.8736184155519773,29.8946820067676349,29.9122350022161569,29.9268624999422279,29.9390520822196926,29.9492100679173276,29.9576750562595571,29.9647292133579661,29.9706076776892836,29.9755063980122465,29.9795886649747665,29.9829905541252550,29.9858254617594184,29.9881878847927901,29.9901565706568647,29.9917971422118086,29.9931642851752045,29.9943035709785057,29.9952529758150455,29.9960441465122685,29.9967034554267613,29.9972528795222715,29.9977107329350865,29.9980922774458634,29.9984102312048542,29.9986751926707313,29.9988959938922726,29.9990799949102289,29.9992333290918545,29.9993611075765649,29.9994675896470895,29.9995563247058783,29.9996302705882414,29.9996918921567790,29.9997432434640707,29.9997860362200406,29.9998216968500735,29.9998514140417072,29.9998761783680870,29.9998968153067622,29.9999140127556245,29.9999283439630133,29.9999402866358373,29.9999502388631463,29.9999585323859606,29.9999654436549612,29.9999712030458241,29.9999760025381406,29.9999800021151657,29.9999833350960081,29.9999861125800393,29.9999884271499937,29.9999903559582997,29.9999919632985623,29.9999933027487948,29.9999944189572822,29.9999953491310407,29.9999961242758850,29.9999967702299060,29.9999973085249430,29.9999977571041292,29.9999981309201438,29.9999984424334265,29.9999987020278454,29.9999989183565674,29.9999990986304965,29.9999992488586997,29.9999993740489224,29.9999994783740540,29.9999995653117111,29.9999996377598350
		,9.9764660493827257,13.8967784319616872,16.9906409139237375,19.6675926356397888,22.0500714096525066,24.2017095387113770,26.0649675045419293,27.6758140834993611,29.0420112893802553,30.1931680660134347,31.1577216321264423,31.9635128357344946,32.6357680863719111,33.1962767611796252,33.6634841138648113,34.0528704470933761,34.3773781914165752,34.6478092531303901,34.8731718209573387,35.0609753955721288,35.2174789978389384,35.3478989408897490,35.4565823490925851,35.5471519110365932,35.6226265710566636,35.6855221325729346,35.7379351058176482,35.7816125859935212,35.8180104872964620,35.8483420722589372,35.8736183933173791,35.8946819943209192,35.9122349952148880,35.9268624959873293,35.9390520799774222,35.9492100666421521,35.9576750555322491,35.9647292129421956,35.9706076774512056,35.9755063978757335,35.9795886648963545,35.9829905540802315,35.9858254617335618,35.9881878847778225,35.9901565706481250,35.9917971422068845,35.9931642851723765,35.9943035709768608,35.9952529758139832,35.9960441465116361,35.9967034554263279,35.9972528795219375,35.9977107329349977,35.9980922774457923,35.9984102312047796,35.9986751926707740,35.9988959938923401,35.9990799949103248,35.9992333290917941,35.9993611075764832,35.9994675896470682,35.9995563247058996,35.9996302705882769,35.9996918921568465,35.9997432434640388,35.9997860362199660,35.9998216968499918,35.9998514140416148,35.9998761783679484,35.9998968153065633,35.9999140127555606,35.9999283439630133,35.9999402866359119,35.9999502388632493,35.9999585323859890,35.9999654436550642,35.9999712030458596,35.9999760025383040,35.9999800021152083,35.9999833350960046,35.9999861125799541,35.9999884271499582,35.9999903559582819,35.9999919632985623,35.9999933027487629,35.9999944189572147,35.9999953491310194,35.9999961242758246,35.9999967702298065,35.9999973085248541,35.9999977571040901,35.9999981309200336,35.9999984424334443,35.9999987020279804,35.9999989183566313,35.9999990986305107,35.9999992488586642,35.9999993740488122,35.9999994783740505,35.9999995653118532
		,11.1809056355738807,15.7674550823042452,19.4384117293823273,22.6528799086107924,25.5454129280676021,28.1117240667511119,30.3494722114419879,32.2573898645185650,33.8686689112502179,35.2196378275953919,36.3482845600186977,37.2897630823605510,38.0746397773962997,38.7288092229270902,39.2739870656546870,39.7283149577772861,40.1069262713207380,40.4224374604667673,40.6853641200179013,40.9044699284572886,41.0870582041830801,41.2392151415308561,41.3660126059870166,41.4716771665928761,41.5597309699884292,41.6331091407137279,41.6942576168470751,41.7452146805219471,41.7876789003523257,41.8230657502563687,41.8525547918634189,41.8771289932115280,41.8976074943392121,41.9146729119477754,41.9288940932889744,41.9407450777404875,41.9506208981170161,41.9588507484308835,41.9657089570254556,41.9714241308545439,41.9761867757119091,41.9801556464268089,41.9834630386892442,41.9862191989075555,41.9885159990895431,41.9904299992410799,41.9920249993674020,41.9933541661397527,41.9944618051165648,41.9953848375972072,41.9961540313308959,41.9967950261090976,41.9973291884242812,41.9977743236867411,41.9981452697389628,41.9984543914492008,41.9987119928744121,41.9989266607287632,41.9991055506072470,41.9992546255059906,41.9993788545883717,41.9994823788235934,41.9995686490195865,41.9996405408496187,41.9997004507080618,41.9997503755900539,41.9997919796583616,41.9998266497153097,41.9998555414295538,41.9998796178581273,41.9998996815482428,41.9999164012903066,41.9999303344085391,41.9999419453402325,41.9999516211170700,41.9999596842642262,41.9999664035534934,41.9999720029614423,41.9999766691345116,41.9999805576119840,41.9999837980098434,41.9999864983414426,41.9999887486180654,41.9999906238485110,41.9999921865404460,41.9999934887834598,41.9999945739864131,41.9999954783216580,41.9999962319349365,41.9999968599457745,41.9999973832880613,41.9999978194067509,41.9999981828389863,41.9999984856991517,41.9999987380827591,41.9999989484023573,41.9999991236684949,41.9999992697235811,41.9999993914365319,41.9999994928637079
		,12.3603918991007067,17.6177006785345149,21.8819774851821514,25.6479483246110114,29.0472204335035329,32.0519477175150271,34.6455632681720047,36.8495760890332278,38.7010917193344213,40.2488424363126285,41.5401075922075904,42.6165822737764017,43.5137660112339759,44.2614553258374670,44.8845408699574406,45.4037823369488365,45.8364847008213516,46.1970703842702619,46.4975585833977547,46.7479654610868778,46.9566378751348807,47.1305315592617688,47.2754429648034247,47.3962024701998672,47.4968353916544075,47.5806961596435016,47.6505801330100311,47.7088167774982566,47.7573473145778280,47.7977894288131964,47.8314911906768359,47.8595759922306101,47.8829799935253746,47.9024833279375599,47.9187361066147943,47.9322800888456229,47.9435667407045827,47.9529722839205874,47.9608102366000182,47.9673418638334681,47.9727848865278830,47.9773207387735212,47.9811006156442019,47.9842505130369901,47.9868754275307907,47.9890628562757300,47.9908857135630740,47.9924047613027724,47.9936706344187485,47.9947255286821033,47.9956046072352791,47.9963371726963501,47.9969476439137068,47.9974563699279742,47.9978803082728902,47.9982335902273718,47.9985279918560153,47.9987733265466545,47.9989777721223945,47.9991481434352707,47.9992901195294266,47.9994084329412019,47.9995070274508748,47.9995891895423625,47.9996576579517154,47.9997147149598575,47.9997622624665325,47.9998018853890187,47.9998349044908252,47.9998624204091371,47.9998853503411027,47.9999044586175359,47.9999203821807754,47.9999336518174573,47.9999447098480729,47.9999539248734806,47.9999616040610633,47.9999680033843816,47.9999733361537722,47.9999777801280700,47.9999814834398038,47.9999845695330620,47.9999871412776926,47.9999892843982252,47.9999910703316601,47.9999925586098328,47.9999937988413450,47.9999948323679959,47.9999956936403933,47.9999964113668014,47.9999970094721036,47.9999975078935108,47.9999979232445213,47.9999982693701668,47.9999985578081407,47.9999987981739622,47.9999989984785316,47.9999991653986200,47.9999993044988855,47.9999994204154774
		,13.5137272447988792,19.4557169854516552,24.3276565416755233,28.6538259505606270,32.5553338635939937,36.0021009840454553,38.9552592159756372,41.4481945736637485,43.5361729095627439,45.2791355389656047,46.7323624858925655,47.9435713493620241,48.9529591217597755,49.7941279250687927,50.4951052749267291,51.0792540064229073,51.5660448882043525,51.9717040373967905,52.3097533531259842,52.5914611239530458,52.8262176020997458,53.0218480013530922,53.1848733343266034,53.3207277785596858,53.4339398154505787,53.5282831795366434,53.6069026496117758,53.6724188746752944,53.7270157288957648,53.7725131074132960,53.8104275895109012,53.8420229912589150,53.8683524927160278,53.8902937439298952,53.9085781199416019,53.9238150999509287,53.9365125832924051,53.9470938194105898,53.9559115161755614,53.9632595968130602,53.9693829973442831,53.9744858311200773,53.9787381926000407,53.9822818271668226,53.9852348559723154,53.9876957133105861,53.9897464277583765,53.9914553564651172,53.9928794637209251,53.9940662197672907,53.9950551831394563,53.9958793192829418,53.9965660994024006,53.9971384161686672,53.9976153468068532,53.9980127890061610,53.9983439908381655,53.9986199923657182,53.9988499936377906,53.9990416613647213,53.9992013844702470,53.9993344870584622,53.9994454058823905,53.9995378382353906,53.9996148651964276,53.9996790543296399,53.9997325452746182,53.9997771210625999,53.9998142675517130,53.9998452229596850,53.9998710191333942,53.9998925159442464,53.9999104299535020,53.9999253582952292,53.9999377985794240,53.9999481654826639,53.9999568045692868,53.9999640038076336,53.9999700031730399,53.9999750026437724,53.9999791688697854,53.9999826407251646,53.9999855339371635,53.9999879449479252,53.9999899541227819,53.9999916284354313,53.9999930236962271,53.9999941864135877,53.9999951553449264,53.9999959627876791,53.9999966356559611,53.9999971963799368,53.9999976636498005,53.9999980530418142,53.9999983775348227,53.9999986479460361,53.9999988732879714,53.9999990610736091,53.9999992175609975,53.9999993479674956
		,14.6453777728562553,21.2869984891098554,26.7731988353809172,31.6653160727871388,36.0910435206931410,39.9645564573238801,43.2695718012446875,46.0491859660267764,48.3723115076187966,50.3098232740042803,51.9247573974288628,53.2706095073709420,54.3921694579732176,55.3268066181082219,56.1056718597675612,56.7547264652293109,57.2956053648743620,57.7463377977590966,58.1219481630203205,58.4349568020050683,58.6957973348546886,58.9131644456674692,59.0943037047099153,59.2452530872543264,59.3710442393773050,59.4758701994809584,59.5632251662343677,59.6360209718615906,59.6966841432179010,59.7472367860145326,59.7893639883458405,59.8244699902884634,59.8537249919067094,59.8781041599216266,59.8984201332686652,59.9153501110568314,59.9294584258809593,59.9412153549007130,59.9510127957502164,59.9591773297911743,59.9659811081596743,59.9716509234671094,59.9763757695559434,59.9803131412968114,59.9835942844136056,59.9863285703448526,59.9886071419534446,59.9905059516280019,59.9920882930234285,59.9934069108534374,59.9945057590436903,59.9954214658700593,59.9961845548922454,59.9968204624104615,59.9973503853415977,59.9977919877849502,59.9981599898207918,59.9984666581839505,59.9987222151530943,59.9989351792939658,59.9991126494121971,59.9992605411768949,59.9993837843135509,59.9994864869281699,59.9995720724407846,59.9996433937004667,59.9997028280835565,59.9997523567364865,59.9997936306136026,59.9998280255115688,59.9998566879262540,59.9998805732718026,59.9999004777262996,59.9999170647720845,59.9999308873100432,59.9999424060909021,59.9999520050759543,59.9999600042305090,59.9999666701918528,59.9999722251593681,59.9999768543003000,59.9999807119172246,59.9999839265974160,59.9999866054983571,59.9999888379142732,59.9999906982622306,59.9999922485514716,59.9999935404599540,59.9999946170494027,59.9999955142079742,59.9999962618405291,59.9999968848660643,59.9999974040553923,59.9999978367123674,59.9999981972615402,59.9999984977169092,59.9999987480978305,59.9999989567486267,59.9999991306235074,59.9999992755189098
};



class Collect {
	public:
	double expected(int N, int K) {
		return tb[(N-1)*100+K-1];
	}
	
// BEGIN CUT HERE
	public:
	void run_test(int Case) { if ((Case == -1) || (Case == 0)) test_case_0(); if ((Case == -1) || (Case == 1)) test_case_1(); if ((Case == -1) || (Case == 2)) test_case_2(); }
	private:
	template <typename T> string print_array(const vector<T> &V) { ostringstream os; os << "{ "; for (typename vector<T>::const_iterator iter = V.begin(); iter != V.end(); ++iter) os << '\"' << *iter << "\","; os << " }"; return os.str(); }
	void verify_case(int Case, const double &Expected, const double &Received) { cerr << "Test Case #" << Case << "..."; if (Expected == Received) cerr << "PASSED" << endl; else { cerr << "FAILED" << endl; cerr << "\tExpected: \"" << Expected << '\"' << endl; cerr << "\tReceived: \"" << Received << '\"' << endl; } }
	void test_case_0() { int Arg0 = 1; int Arg1 = 1; double Arg2 = 3.5; verify_case(0, Arg2, expected(Arg0, Arg1)); }
	void test_case_1() { int Arg0 = 1; int Arg1 = 2; double Arg2 = 4.249999999999999; verify_case(1, Arg2, expected(Arg0, Arg1)); }
	void test_case_2() { int Arg0 = 2; int Arg1 = 2; double Arg2 = 6.262345679012343; verify_case(2, Arg2, expected(Arg0, Arg1)); }

// END CUT HERE

};
int fact[11];
int cnk[11][11];
vi state[11];
int vid[8010];
int start[11];
int ids[two(25)];
double prob[8010];
double best[8010];
int pos[8010];


double dp[2][8010];
void proc(int N){

	fact[0]=1;
	FOR (i, 1, N)
		fact[i]=fact[i-1]*i;

	memset(cnk, 0, sizeof(cnk));
	cnk[0][0]=1;
	FOR (i, 1, N){
		cnk[i][0]=1;
		FOR (j, 1, i){
			cnk[i][j]=cnk[i-1][j-1]+cnk[i-1][j];
		}
	}
	REP(i, 11)
		CLR(state[i]);

	int c=0;
	vi v(6);
	start[0]=0;
	for (int n=0; n<=N; ++n)
	for (v[0]=0; v[0]<=n; ++v[0]){
		for (v[1]=0; v[0]+v[1]<=n; ++v[1])
			for (v[2]=0; v[0]+v[1]+v[2]<=n; ++v[2])
				for (v[3]=0; v[0]+v[1]+v[2]+v[3]<=n; ++v[3])
					for (v[4]=0; v[0]+v[1]+v[2]+v[3]+v[4]<=n; ++v[4]){
						v[5]=n-accumulate(v.begin(), v.end()-1, 0);
						state[n].pb(v[0]+(v[1]<<4)+(v[2]<<8)+(v[3]<<12)+(v[4]<<16)+(v[5]<<20));
						prob[c]=(fact[n]/fact[v[0]]/fact[v[1]]/fact[v[2]]/fact[v[3]]/fact[v[4]]/fact[v[5]])/pow(6., n);
						pos[c]=n;
						vid[c]=state[n].back();
						ids[state[n].back()]=c++;
					}
		start[n+1]=c;
	}
	
	for (int j=0; j<start[N]; ++j)
		dp[0][j]=dp[1][j]=0.;
	double s=0;
	for (int j=start[N]; j<start[N+1]; ++j){
		dp[0][j]=0.;
		for (int i=0; i<6; ++i)
			dp[0][j]=max(dp[0][j], double(i+1)*(vid[j]>>(4*i)&0xf));
		s+=dp[0][j]*prob[j];
	}

	for (int i=0; i<100; ++i){
		int id, nid;
		id=i%2, nid=(id+1)%2;
		for (int j=0; j<=N; ++j)
			for (int k=start[j]; k<start[j+1]; ++k){
				int tot=1;
				dp[nid][k]=0.;
				for (int nj=start[N-j]; nj<start[N-j+1]; ++nj){//throw N-j dices, try keep from 0 to N-j
					best[nj]=0.;
					for (int nk=0; nk<=N-j; ++nk){
						for (int l=start[nk]; l<start[nk+1]; ++l){
							bool ok=true;
							REP(nt, 6)
								if (((vid[nj]>>4*nt)&0xf)<((vid[l]>>4*nt)&0xf)){ok=false; break;}
							if (!ok)continue;
							int nv=vid[k]+vid[l];
							best[nj]=max(best[nj], dp[id][ids[nv]]);
						}
					}

					dp[nid][k]+=best[nj]*prob[nj];
				//printf("%x => %lf\n", vid[k], dp[nid][k]);

				}
			}
		printf(",%.20lf", dp[nid][0]);
	}
	printf("\n");
}

// BEGIN CUT HERE
int main(){
	for (int i=0; i<=10; ++i)
		proc(i);

	Collect ___test; 
	___test.run_test(-1); 
} 
// END CUT HERE
