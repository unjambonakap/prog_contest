// BEGIN CUT HERE

// END CUT HERE
#line 5 "MedievalCity.cpp"

#include <vector>
#include <list>
#include <map>
#include <set>
#include <deque>
#include <queue>
#include <stack>
#include <algorithm>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <cstdlib>
#include <string>
#include <cstring>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <cassert>
#include <climits>
//#include <ext/hash_map>


using namespace std;
using namespace __gnu_cxx;



#define REP(i,n) for(int i = 0; i < int(n); ++i)

#define REPV(i, n) for (int i = (n) - 1; (int)i >= 0; --i)
#define FOR(i, a, b) for(int i = (int)(a); i <= (int)(b); ++i)
#define FORV(i, a, b) for(int i = (int)(a); i >= (int)(b); --i)

#define FE(i,t) for (typeof((t).begin())i=(t).begin();i!=(t).end();++i)
#define FEV(i,t) for (typeof((t).rbegin())i=(t).rbegin();i!=(t).rend();++i)

#define SZ(a) (int((a).size()))
#define two(x) (1 << (x))
#define twoll(x) (1LL << (x))
#define ALL(a) (a).begin(), (a).end()
#define CLR(a) (a).clear()


#define pb push_back
#define PF push_front
#define ST first
#define ND second
#define MP(x,y) make_pair(x, y)

typedef long long ll;
typedef unsigned long long ull;
typedef pair<int,int> pii;
typedef vector<int> vi;
typedef vector<string> vs;
typedef queue<int> qi;

template<class T> void checkmin(T &a, T b){if (b<a)a=b;}
template<class T> void checkmax(T &a, T b){if (b>a)a=b;}
template<class T> void out(T t[], int n){REP(i, n)cout<<t[i]<<" "; cout<<endl;}
template<class T> void out(vector<T> t, int n=-1){for (int i=0; i<(n==-1?t.size():n); ++i) cout<<t[i]<<" "; cout<<endl;}
inline int count_bit(int n){return (n == 0)?0:1+count_bit(n&(n-1));}
inline bool bit_set(int a, int b){return (a&two(b));}
inline int low_bit(int n){return (n^n-1)&n;}
inline int ctz(int n){return (n==0?-1:(n==1?0:ctz(n>>1)+1));}
int toInt(string s){int a; istringstream(s)>>a; return a;}
string toStr(int a){ostringstream os; os<<a; return os.str();}

const int maxn=1000;
int mp[2*maxn][2*maxn];
int path[2*maxn][2*maxn];
int v[]={-1, 0, 1, 0, -1};

int dir(char c){
	if (c=='L')return 0;
	if (c=='U')return 1;
	if (c=='R')return 2;
	if (c=='D')return 3;
	assert(0);
}

class MedievalCity {
	public:
	int getDangerousBlocks(vector <string> boundary, int db) {
		string s;
		FE(it, boundary) s+=*it;
		int mx=maxn, my=maxn;

		memset(path, 0, sizeof(path));
		path[mx][my]=1;
		REP(i, s.length()){
			int k=1;
			int d=dir(s[i]);
			if (i+1<s.length() && s[i+1]<='9') k=s[++i]-'0';
			if (i+1<s.length() && s[i+1]<='9') k=k*10+s[++i]-'0';
			
			REP(j, k) path[mx+=v[d]][my+=v[d+1]]=1;
		}
		vector<pii> bound;
		memset(mp, 0, sizeof(mp));
		REP(i, 2*maxn-1){
			int in=0, pin=0;
			REP(j, 2*maxn){
				if (path[i][j]&&path[i+1][j]) in^=1;
				if (in) mp[i][j]=-1;
				pin=in;
			}
		}
		int ax, ay, bx, by;
		ax=ay=INT_MAX; bx=by=INT_MIN;
		REP(i, 2*maxn) REP(j, 2*maxn) if (mp[i][j]) checkmin(ax, i), checkmin(ay, j), checkmax(bx, i), checkmax(by, j);

		stack<pii> q[2];
		FOR(i, ax, bx) FOR(j, ay, by) if (mp[i][j]==-1) REP(k, 4){
			int nx=i+v[k], ny=j+v[k+1];
		   	if (mp[nx][ny]==0){ mp[i][j]=1, q[0].push(MP(i, j)); break;}
		}
		int cnt=0;
		pii a;
		REP(l, db){
			int p=l%2, np=(p+1)%2;
			cnt+=q[p].size();
			while(!q[p].empty()){
				a=q[p].top(); q[p].pop();
				REP(k, 4){int nx=a.ST+v[k], ny=a.ND+v[k+1]; if (mp[nx][ny]==-1){ mp[nx][ny]=l+2, q[np].push(MP(nx, ny)); }}
			}
		}
		return q[db%2].size()+cnt;

		
	}
	
// BEGIN CUT HERE
	public:
	void run_test(int Case) { if ((Case == -1) || (Case == 0)) test_case_0(); if ((Case == -1) || (Case == 1)) test_case_1(); if ((Case == -1) || (Case == 2)) test_case_2(); if ((Case == -1) || (Case == 3)) test_case_3(); }
	private:
	template <typename T> string print_array(const vector<T> &V) { ostringstream os; os << "{ "; for (typename vector<T>::const_iterator iter = V.begin(); iter != V.end(); ++iter) os << '\"' << *iter << "\","; os << " }"; return os.str(); }
	void verify_case(int Case, const int &Expected, const int &Received) { cerr << "Test Case #" << Case << "..."; if (Expected == Received) cerr << "PASSED" << endl; else { cerr << "FAILED" << endl; cerr << "\tExpected: \"" << Expected << '\"' << endl; cerr << "\tReceived: \"" << Received << '\"' << endl; } }
	//void test_case_0() { string Arr0[] = {"LURD"}; vector <string> Arg0(Arr0, Arr0 + (sizeof(Arr0) / sizeof(Arr0[0]))); int Arg1 = 0; int Arg2 = 1; verify_case(0, Arg2, getDangerousBlocks(Arg0, Arg1)); }
	void test_case_0() { string Arr0[] = {"RRRRRRRRRRRRRRDRRDDDLLLLDDDRRRRRRRRDDLL", "LLLLLLLLLLLUUUUUUULLDDDDDDDLLLLLLLLLUUUUUURRRRUUU"}; vector <string> Arg0(Arr0, Arr0 + (sizeof(Arr0) / sizeof(Arr0[0]))); int Arg1 = 1; int Arg2 = 1; verify_case(0, Arg2, getDangerousBlocks(Arg0, Arg1)); }
	void test_case_1() { string Arr0[] = {"LUUR7D4RDLDDDL7UURU2UU"}; vector <string> Arg0(Arr0, Arr0 + (sizeof(Arr0) / sizeof(Arr0[0]))); int Arg1 = 1; int Arg2 = 44; verify_case(1, Arg2, getDangerousBlocks(Arg0, Arg1)); }
	void test_case_2() { string Arr0[] = {"L50U50R50D50"}; vector <string> Arg0(Arr0, Arr0 + (sizeof(Arr0) / sizeof(Arr0[0]))); int Arg1 = 10; int Arg2 = 1716; verify_case(2, Arg2, getDangerousBlocks(Arg0, Arg1)); }
	void test_case_3() { string Arr0[] = {"L50U50U50U50U50R50D50D50D50D50"}; vector <string> Arg0(Arr0, Arr0 + (sizeof(Arr0) / sizeof(Arr0[0]))); int Arg1 = 7; int Arg2 = 3744; verify_case(3, Arg2, getDangerousBlocks(Arg0, Arg1)); }

// END CUT HERE

};

// BEGIN CUT HERE
int main(){
  MedievalCity ___test; 
        ___test.run_test(0); 
        } 
// END CUT HERE
