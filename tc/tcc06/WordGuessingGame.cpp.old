// BEGIN CUT HERE

// END CUT HERE
#line 5 "WordGuessingGame.cpp"

#include <vector>
#include <list>
#include <map>
#include <set>
#include <deque>
#include <queue>
#include <stack>
#include <algorithm>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <cstdlib>
#include <string>
#include <cstring>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <cassert>
#include <climits>
//#include <ext/hash_map>


using namespace std;
using namespace __gnu_cxx;



#define REP(i,n) for(int i = 0; i < int(n); ++i)

#define REPV(i, n) for (int i = (n) - 1; (int)i >= 0; --i)
#define FOR(i, a, b) for(int i = (int)(a); i <= (int)(b); ++i)
#define FORV(i, a, b) for(int i = (int)(a); i >= (int)(b); --i)

#define FE(i,t) for (typeof((t).begin())i=(t).begin();i!=(t).end();++i)
#define FEV(i,t) for (typeof((t).rbegin())i=(t).rbegin();i!=(t).rend();++i)

#define SZ(a) (int((a).size()))
#define two(x) (1 << (x))
#define twoll(x) (1LL << (x))
#define ALL(a) (a).begin(), (a).end()
#define CLR(a) (a).clear()


#define pb push_back
#define PF push_front
#define ST first
#define ND second
#define MP(x,y) make_pair(x, y)

typedef long long ll;
typedef unsigned long long ull;
typedef pair<int,int> pii;
typedef vector<int> vi;
typedef vector<string> vs;
typedef queue<int> qi;

template<class T> void checkmin(T &a, T b){if (b<a)a=b;}
template<class T> void checkmax(T &a, T b){if (b>a)a=b;}
template<class T> void out(T t[], int n){REP(i, n)cout<<t[i]<<" "; cout<<endl;}
template<class T> void out(vector<T> t, int n=-1){for (int i=0; i<(n==-1?t.size():n); ++i) cout<<t[i]<<" "; cout<<endl;}
inline int count_bit(int n){return (n == 0)?0:1+count_bit(n&(n-1));}
inline bool bit_set(int a, int b){return (a&two(b));}
inline int low_bit(int n){return (n^n-1)&n;}
inline int ctz(int n){return (n==0?-1:(n==1?0:ctz(n>>1)+1));}
int toInt(string s){int a; istringstream(s)>>a; return a;}
string toStr(int a){ostringstream os; os<<a; return os.str();}

const int maxc=26;
const int maxn=10;
const int maxm=18;

int n, m;
int tb[maxm][maxn];
int type[maxm];

int seen[maxn][maxc];
int choosen[maxn];
int s[maxn];
vector<vi> res;



void reca(int i){
    if (i==n) res.pb(vi(s, s+n));
    else if (choosen[i]) reca(i+1);
    else REP(j, maxc) if (!seen[i][j]){
        s[i]=j;
        reca(i+1);
    }

}
inline void rec(int a, int b, int c){//char pos, tb pos, number of correct guess
    if (b==m){
        reca(0);
        return;
    }
    if (a==n){
        if (type[b]==c) rec(0, b+1, 0);
        return;
    }

    
    if (choosen[a]) rec(a+1, b, c^(tb[b][a]==s[a]));
    else{
        if (!seen[a][tb[b][a]]){
            choosen[a]=1;
            s[a]=tb[b][a];
            rec(a+1, b, c^1);
            choosen[a]=0;

            seen[a][tb[b][a]]=1;
            rec(a+1, b, c);
            seen[a][tb[b][a]]=0;
        } else  rec(a+1, b, c);
    }



}


class WordGuessingGame {
    public:
        vector <string> possibleWords(vector <string> even, vector <string> odd) {
            m=even.size()+odd.size();
            n=(even.size()==0?odd[0].length():even[0].length());
            REP(i, odd.size()){
                type[i]=1;
                REP(j, n) tb[i][j]=odd[i][j]-'A';
            }
            REP(i, even.size()){
                type[i+odd.size()]=0;
                REP(j, n) tb[i+odd.size()][j]=even[i][j]-'A';
            }


            memset(seen, 0, sizeof(seen));
            memset(choosen, 0, sizeof(choosen));
            res.clear();

            rec(0, 0, 0);
            vs ans;
            REP(i, res.size()){
                ans.pb(string(n, 'f'));
                REP(j, n) ans[i][j]=res[i][j]+'A';

            }
            sort(ALL(ans));
            return ans;

        }

        // BEGIN CUT HERE
    public:
        void run_test(int Case) { if ((Case == -1) || (Case == 0)) test_case_0(); if ((Case == -1) || (Case == 1)) test_case_1(); if ((Case == -1) || (Case == 2)) test_case_2(); if ((Case == -1) || (Case == 3)) test_case_3(); }
    private:
        template <typename T> string print_array(const vector<T> &V) { ostringstream os; os << "{ "; for (typename vector<T>::const_iterator iter = V.begin(); iter != V.end(); ++iter) os << '\"' << *iter << "\","; os << " }"; return os.str(); }
        void verify_case(int Case, const vector <string> &Expected, const vector <string> &Received) { cerr << "Test Case #" << Case << "..."; if (Expected == Received) cerr << "PASSED" << endl; else { cerr << "FAILED" << endl; cerr << "\tExpected: " << print_array(Expected) << endl; cerr << "\tReceived: " << print_array(Received) << endl; } }
        void test_case_0() { string Arr0[] = {"JJJJJJJJJ", "KKKKKKKKK", "LLLLLLLLL", "MMMMMMMMM", "NNNNNNNNN", "OOOOOOOOO", "PPPPPPPPP", "QQQQQQQQQ"}; vector <string> Arg0(Arr0, Arr0 + (sizeof(Arr0) / sizeof(Arr0[0]))); string Arr1[] = {"AAAAAAAAA", "BBBBBBBBB", "CCCCCCCCC", "DDDDDDDDD", "EEEEEEEEE", "FFFFFFFFF", "GGGGGGGGG", "HHHHHHHHH", "IIIIIIIII", "JJJJJJJJJ"}; vector <string> Arg1(Arr1, Arr1 + (sizeof(Arr1) / sizeof(Arr1[0]))); string Arr2[] = {"SEE" }; vector <string> Arg2(Arr2, Arr2 + (sizeof(Arr2) / sizeof(Arr2[0]))); verify_case(0, Arg2, possibleWords(Arg0, Arg1)); }
        //void test_case_0() { string Arr0[] = {"DAY","MAY","BUY"}; vector <string> Arg0(Arr0, Arr0 + (sizeof(Arr0) / sizeof(Arr0[0]))); string Arr1[] = {"SAY","DUE","TEN"}; vector <string> Arg1(Arr1, Arr1 + (sizeof(Arr1) / sizeof(Arr1[0]))); string Arr2[] = {"SEE" }; vector <string> Arg2(Arr2, Arr2 + (sizeof(Arr2) / sizeof(Arr2[0]))); verify_case(0, Arg2, possibleWords(Arg0, Arg1)); }
        void test_case_1() { string Arr0[] = {"QMNA","UQJE"}; vector <string> Arg0(Arr0, Arr0 + (sizeof(Arr0) / sizeof(Arr0[0]))); string Arr1[] = {"HUIF","QMZB","QEHJ","LBJL"}; vector <string> Arg1(Arr1, Arr1 + (sizeof(Arr1) / sizeof(Arr1[0]))); string Arr2[] = {"HBHB", "HBZJ", "HEZL", "LEIB", "LEZF", "LUHB", "LUZJ", "QBIA", "QBNF", "QUNL" }; vector <string> Arg2(Arr2, Arr2 + (sizeof(Arr2) / sizeof(Arr2[0]))); verify_case(1, Arg2, possibleWords(Arg0, Arg1)); }
        void test_case_2() { string Arr0[] = {"NODSN"}; vector <string> Arg0(Arr0, Arr0 + (sizeof(Arr0) / sizeof(Arr0[0]))); string Arr1[] = {"MOOTN","CRXXU","SREQR","DEREX","HOYGF","CDLCP","ZTDOC","STEEB"}; vector <string> Arg1(Arr1, Arr1 + (sizeof(Arr1) / sizeof(Arr1[0]))); string Arr2[] = {"CODER" }; vector <string> Arg2(Arr2, Arr2 + (sizeof(Arr2) / sizeof(Arr2[0]))); verify_case(2, Arg2, possibleWords(Arg0, Arg1)); }
        void test_case_3() { string Arr0[] = {}; vector <string> Arg0(Arr0, Arr0 + (sizeof(Arr0) / sizeof(Arr0[0]))); string Arr1[] = {"AB","BC","CA"}; vector <string> Arg1(Arr1, Arr1 + (sizeof(Arr1) / sizeof(Arr1[0]))); string Arr2[] = { }; vector <string> Arg2(Arr2, Arr2 + (sizeof(Arr2) / sizeof(Arr2[0]))); verify_case(3, Arg2, possibleWords(Arg0, Arg1)); }

        // END CUT HERE

};

// BEGIN CUT HERE
int main(){
    WordGuessingGame ___test; 
    ___test.run_test(0);
} 
// END CUT HERE
