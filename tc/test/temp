#include <cstring>#include <iostream>#include <cstdio>#include <algorithm>using namespace std;const int MOD=1000000007;const int MAX_R=305;const int MAX_L=55;int ma[MAX_R][MAX_R], mb[MAX_R][MAX_R];char chessboard[MAX_R][MAX_R];int R, C;int vx[]={1, 1, 0, -1, -1, -1, 0, 1, 0, 2, -2, -2, 2};int vy[]={0, 1, 1, 1, 0, -1, -1, -1, 0, 2, 2, -2, -2};string word;int solve(int p){if (p==word.length()){memset(mb, 0, sizeof(mb));return 0;}s=solve(p+1);memcpy(mb, ma, sizeof(mb));int ns=0;int r, c, i, j;memset(mb, 0, sizeof(mb));for (r=0; r<R; ++r){for (c=0; c<C; ++c){if (chessboard[r][c]!=word[p])continue;for (i=max(r-1, 0); i<=min(r+1, R-1); ++i)for (j=0; j<C; ++j)mb[r][c]=(mb[r][c]+ma[i][j])%MOD;ns=(ns+mb[r][c])%MOD;}}}class Unicorn{public:int countWays(int _R, int _C, int L, int seed, string _word){int x, d;R=_R, C=_C, word=_word;x = seed;d = (65535/L)+1;int countl[MAX_L];memset(countl, 0, sizeof(countl));for (int r=0; r<R; r++){  for (int c=0; c<C; c++) {    x = (x * 25173 + 13849)%65536;    chessboard[r][c]=65+(x/d);    printf("%c", chessboard[r][c]);    ++countl[chessboard[r][c]-65];  }  printf("\n");  }       return solve(0);   }  };
